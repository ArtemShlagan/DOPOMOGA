from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio

API_TOKEN = "7652734261:AAGBkXeDyiYF7b96LVWAu5cfxpKVeUzcb_k"

# –ö–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
CHANNELS = [
    "@INFOpuls247",
    "@UA_Live24I7",
    "@Kyivofficial24l7",
    "@AirmapsofUkraine",
    "@special_new_s"
]

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start"))
async def send_welcome(message: Message):
    greeting_text = (
        "–í—ñ—Ç–∞—é!\n–Ø —Ç—É—Ç –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º.\n–í–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é?"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–∞–∫", callback_data="instruction")]
    ])
    await message.answer(greeting_text, reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@dp.callback_query(lambda callback: callback.data == "instruction")
async def show_channels(callback: CallbackQuery):
    message_text = (
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—ñ–≤ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ —Ä–æ–∑–≤–∏—Ç–∫—É –ë–æ—Ç –ü–æ–º—ñ—á–Ω–∏–∫–∞."
    )
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    channels_text = "\n".join([f"üëâ {channel}" for channel in CHANNELS])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="check_subs")]
    ])
    await callback.message.answer(message_text + "\n" + channels_text, reply_markup=keyboard)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
@dp.callback_query(lambda callback: callback.data == "check_subs")
async def check_subscriptions(callback: CallbackQuery):
    user_id = callback.from_user.id
    not_subscribed = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    for channel in CHANNELS:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                not_subscribed.append(channel)
        except Exception as e:
            not_subscribed.append(channel)

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    if not not_subscribed:
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "–î—è–∫—É—é –∑–∞ –¥–æ–≤—ñ—Ä—É.\n–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–æ–≤–∏–Ω–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö —Å–ø–æ–Ω—Å–æ—Ä–∞—Ö, —Ç–∞–º –∑–∞–≤–∂–¥–∏ –ø—É–±–ª—ñ–∫—É—î—Ç—å—Å—è –Ω–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏–ø–ª–∞—Ç–∏ –£–∫—Ä–∞—ó–Ω—Ü—è–º.\n–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!"
        )
        await callback.message.answer("üí∞ –í–∞—à –±–æ–Ω—É—Å: https://t.me/vyplatigro")
    else:
        channels_text = "\n".join([f"üëâ {channel}" for channel in not_subscribed])
        await callback.message.answer(f"–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–∞–Ω–∞–ª–∏:\n{channels_text}")

# –û–ø–ª–∞—Ç–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)
@dp.callback_query(lambda callback: callback.data == "pay")
async def pay_option(callback: CallbackQuery):
    await callback.message.answer("–§—É–Ω–∫—Ü—ñ—è –æ–ø–ª–∞—Ç–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞. –°–∫–æ—Ä–æ –≤–æ–Ω–∞ –∑'—è–≤–∏—Ç—å—Å—è!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())